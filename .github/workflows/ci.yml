name: 'CI'

on:
  pull_request:
    branches: [ dev ]

jobs:
  ci:
    runs-on: self-hosted
    steps:
      # 1️⃣ 코드 체크아웃
      - name: 깃헙 코드를 VM으로 복사
        uses: actions/checkout@v4

      # 2️⃣ Java 17 설치
      - name: 깃헙 액션의 VM에 자바 설치중 ...
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      # 3️⃣ 환경 변수 파일 생성
      - name: 환경 변수 파일 생성
        run: |
          echo "${{ secrets.ENV }}" > .env
        shell: bash

      # 4️⃣ 현재 실행 중인 Docker 컨테이너 및 이미지 확인
      - name: 현재 실행 중인 Docker 컨테이너 및 이미지 확인
        run: |
          echo "🔍 현재 실행 중인 컨테이너 목록:"
          docker ps -a
          echo "🔍 현재 존재하는 Docker 이미지 목록:"
          docker images

      # 5️⃣ 기존 Docker 컨테이너, 볼륨 및 이미지 삭제 (MySQL 데이터 볼륨 포함)
      - name: 기존 Docker 컨테이너 및 이미지 삭제
        run: |
          echo "🛑 모든 Docker 컨테이너 중지 및 삭제..."
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          
          echo "🗑️ 사용하지 않는 Docker 볼륨 삭제..."
          docker volume prune -f
          
          echo "🗑️ 기존 Docker 이미지 삭제..."
          docker rmi -f $(docker images -aq) || true
          
          echo "🗑️ MySQL 데이터 볼륨 삭제..."
          docker volume rm mysql_data || true
          
          echo "✅ Docker 정리 완료!"

      # 6️⃣ Docker Compose로 컨테이너 실행
      - name: Docker Compose 실행
        run: docker-compose up -d

      # 7️⃣ MySQL이 완전히 시작될 때까지 대기
      - name: MySQL이 실행될 때까지 대기
        run: |
          echo "⏳ MySQL이 실행될 때까지 기다리는 중..."
          for i in {1..30}; do
            if docker exec carnation_mysql_container mysqladmin --host=localhost --protocol=tcp -u root -p'root12!@12' ping --silent; then
              echo "✅ MySQL is ready!"
              exit 0
            fi
            echo "⏳ MySQL이 아직 준비되지 않음. 2초 후 재시도..."
            sleep 2
          done
          echo "❌ MySQL이 60초 내에 시작되지 않음."
          exit 1

      # 8️⃣ Gradle 빌드 및 테스트 실행
      - name: 빌드 및 테스트 실행
        run: |
          chmod +x ./gradlew
          ./gradlew build --info --stacktrace

      # 9️⃣ 테스트 결과 아티팩트 업로드
      - name: 테스트 리포트 업로드
        if: always() # 테스트 실패해도 실행됨
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/
